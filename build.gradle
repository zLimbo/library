plugins {
    id 'java'
    id 'distribution'
    id 'org.hidetake.ssh' version '2.10.1'
}

group 'BFT-SMaRt'
version '2.0'

compileJava {
    sourceCompatibility = 8
    targetCompatibility = 8
}

repositories {
    mavenCentral()
}

jar {
    archivesBaseName='BFT-SMaRt'
    project.version=""
}

ssh.settings {
    fileTransfer = 'scp'
}

remotes {
    // master {
    //     host = '219.228.148.181'
    //     user = 'z'
    //     password = 'z'
    //     //identity='<private key>'
    // }
    node0 {
        host = '219.228.148.45'
        user = 'z'
        password = 'z'
    }
    node1 {
        host = '219.228.148.80'
        user = 'z'
        password = 'z'
    }
    node2 {
        host = '219.228.148.172'
        user = 'z'
        password = 'z'
    }
    node3 {
        host = '219.228.148.231'
        user = 'z'
        password = 'z'
    }
    node4 {
        host = '219.228.148.181'
        user = 'z'
        password = 'z'
    }
}

task remoteDeploy(dependsOn: installDist) {
    doLast {
        def fileSeparator = System.getProperty("file.separator")
        def src = project.buildDir.name + fileSeparator + "install" + fileSeparator + project.name
        def target = '~/smart'
        println ("from: ${src}, into: ${target}")
        ssh.run {
            session(remotes.node0) {
                put from: src, into: target
            }
            session(remotes.node1) {
                put from: src, into: target
            }
            session(remotes.node2) {
                put from: src, into: target
            }
            session(remotes.node3) {
                put from: src, into: target
            }
            session(remotes.node4) {
                put from: src, into: target
            }
        }
    }
}

task localDeploy(dependsOn: installDist) {
    doLast {
        int nServers = 4
        int nClients = 1

        def fileSeparator = System.getProperty("file.separator")
        def src = project.buildDir.name + fileSeparator + "install" + fileSeparator + project.name
        def workingDirectory = project.buildDir.name + fileSeparator + "local" + fileSeparator

        println ("Deploying project into ${workingDirectory}")

        for (i in 0..<nServers) {
            def target = workingDirectory + "rep${i}"
            copy {
                from src
                into target
            }
        }

        for (i in 0..<nClients) {
            def target = workingDirectory + "cli${i}"
            copy {
                from src
                into target
            }
        }
    }
}

task setupIntegrationTestingEnvironment(dependsOn: installDist) {
    doFirst {
        int nServers = 4
        int nClients = 1

        def fileSeparator = System.getProperty("file.separator")
        def src = project.buildDir.name + fileSeparator + "install" + fileSeparator + project.name
        def workingDirectory = project.buildDir.name + fileSeparator + "integration" + fileSeparator
        copy {
            from src + fileSeparator + "lib"
            into workingDirectory + fileSeparator + "lib"
        }
        copy {
            from project.projectDir.absolutePath + fileSeparator + "config" + fileSeparator + "benchmark.config"
            into workingDirectory
        }

        for (i in 0..<nServers) {
            def target = workingDirectory + "rep${i}"
            copy {
                from src
                into target
            }
        }

        for (i in 0..<nClients) {
            def target = workingDirectory + "cli${i}"
            copy {
                from src
                into target
            }
        }
    }
}

task recoveryIntegrationTest(type: JavaExec, dependsOn: setupIntegrationTestingEnvironment) {
    def fileSeparator = System.getProperty("file.separator")
    String workingDirectory = project.buildDir.absolutePath + fileSeparator + "integration" + fileSeparator
    classpath = sourceSets.main.runtimeClasspath
    args(workingDirectory)
    mainClass = 'bftsmart.tests.recovery.RecoveryTest'
}

distributions {
    main {
        contents {
            into('config') {
                from 'config'
            }
            into('lib') {
                from jar
                from(configurations.runtimeClasspath)
            }
            from 'runscripts/smartrun.sh'
            from 'runscripts/smartrun.cmd'
        }
    }
}

dependencies {
    implementation fileTree('lib'){include '*.jar'}
    // https://mvnrepository.com/artifact/org.bouncycastle/bcpkix-jdk15on
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.69'

    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
    implementation 'org.bouncycastle:bcprov-jdk15on:1.69'

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation 'commons-codec:commons-codec:1.15'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    implementation 'ch.qos.logback:logback-core:1.2.5'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation 'ch.qos.logback:logback-classic:1.2.5'

    // https://mvnrepository.com/artifact/io.netty/netty-all
    implementation 'io.netty:netty-all:4.1.67.Final'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:1.7.32'
}
